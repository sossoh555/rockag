function [pPL, resus] = delVcalc(lambda, e, N)
global Isp g0 Mpay W Udes

N = round(N);
if size(lambda,2) == 1,
    Nmax = round(N);
    for i =0:1:Nmax - 1
        pPL = (lambda/(1+lambda))^Nmax;
        mE(i+1) = (1 - pPL^(1/Nmax))*e*Mpay/(pPL^((Nmax - i)/Nmax));
        mp(i+1) = (1 - pPL^(1/Nmax))*(1-e)*Mpay/(pPL^((Nmax - i)/Nmax));
    end
    Mvec = sum(mE)+sum(mp) + Mpay;
    
    for n = 1:Nmax,
    if n == 1,
        m(n) = Mvec - mp(n);
        v(n) = Isp*g0*log(Mvec/m(n));
    else
        m(n-1) = m(n-1) - mE(n-1);
        m(n) = m(n-1) - mp(n);
        v(n) = Isp*g0*log(m(n-1)/m(n));
    end
    end

    delV = sum(v);
    delVFit = abs(W(1)*(Udes - delV)/Udes);
    
%     pPL = (lambda/(1+lambda));
%     num = (pPL^(1/N))*(1-e) + e;
%     U = log(1/num);
%     resus = U*Isp*g0*N;
end
if size(lambda,2)>1,
    pPL = (lambda./(1+lambda));
    num = (pPL.^(1./N)).*(1-e) + e;
    U = log(1./num);
    resus = U.*Isp*g0*N;
end


end
